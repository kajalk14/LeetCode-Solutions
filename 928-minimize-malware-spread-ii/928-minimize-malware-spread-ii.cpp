class Solution {
public:
    vector<bool> visited;
    int cnt;
    
    void dfs(int v, vector<vector<int>>& graph, int node){
        if(v==node) return;
        cnt++;
        visited[v]=1;
        for(int i=0; i<(int)graph.size(); i++){
            if(graph[v][i]==1 && visited[i]==0){
                dfs(i,graph,node);
            }
        }
    }
    int func(vector<vector<int>>& graph, int node, set<int>& initial){
        int n=graph.size(), res=0;
        visited.assign(n,0);
        for(int i:initial){
            if(i==node || visited[i]) continue;
            cnt=0;
            dfs(i,graph,node);
            res+= cnt;
        }
        return res;
    }
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        set<int> ini(initial.begin(), initial.end());
        int res=INT_MAX, n;
        for(int node:initial){
            int ans=func(graph,node,ini);
            if(ans==res) n=min(n,node);
            if(ans<res){
                res=ans;
                n=node;
            }
        }
        return n;
    }
};